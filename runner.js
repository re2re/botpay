// runner.js
import 'dotenv/config';
import fetch from 'node-fetch';
import puppeteer from 'puppeteer';

const {
  API_ROOT,
  BOT_TOKEN,
  CHAT_MAIN,
  SITE_URL,
  SITE_LOGIN,
  SITE_PASSWORD
} = process.env;

async function fetchNextTicket() {
  const res = await fetch(`${API_ROOT}/tickets/new`);
  if (!res.ok) throw new Error(`GET /tickets/new ‚Üí ${res.status}`);
  return await res.json();  // [{ id, terminal_id, amount, pin, created_at }, ‚Ä¶]
}

async function completeTicket(id) {
  // –ª–∏–±–æ DELETE, –ª–∏–±–æ POST /tickets/:id/complete
  const res = await fetch(`${API_ROOT}/tickets/${id}/complete`, { method: 'POST' });
  if (!res.ok) console.error(`Failed to complete ticket ${id}: ${await res.text()}`);
}

async function processTicket(t) {
  const PIN    = String(t.pin).padStart(10, '0');
  const AMOUNT = t.amount;

  let status = 'FAIL';

  const browser = await puppeteer.launch({
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  try {
    const page = await browser.newPage();
    page.setDefaultTimeout(20000);

    // 1) –õ–æ–≥–∏–Ω
    await page.goto(SITE_URL, { waitUntil: 'networkidle0', timeout: 60000 });
    await page.type('input[placeholder="–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ª–æ–≥–∏–Ω"]', SITE_LOGIN);
    await page.type('input[placeholder="–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø–∞—Ä–æ–ª—å"]', SITE_PASSWORD);
    await page.click('button.btn.btn-red');
    await page.waitForTimeout(500);

    // 2) –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—é
    const svgCard = await page.waitForSelector('svg[data-icon="credit-card"]');
    await (await svgCard.evaluateHandle(el => el.closest('button'))).click();
    await page.waitForTimeout(500);

    // 3) –í–≤–æ–¥ —Å—É–º–º—ã
    const field1 = await page.waitForSelector('input.e-numerictextbox');
    await field1.click({ clickCount: 3 });
    await page.keyboard.press('Delete');
    await page.type('input.e-numerictextbox', String(AMOUNT));
    await page.waitForTimeout(500);

    // 4) –í–≤–æ–¥ PIN
    await page.$$eval('div.e-tab-text', els =>
      els.find(e => e.textContent?.trim() === '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')?.click()
    );
    await page.waitForTimeout(500);
    await page.type('input[aria-label="textbox"]', PIN);
    await page.waitForTimeout(500);

    // 5) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—è –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–≤–æ–¥
    const field2 = await page.waitForSelector('input.e-numerictextbox');
    if (await field2.evaluate(el => el.disabled)) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π PIN: ${PIN}`);
    }
    await field2.click({ clickCount: 3 });
    await page.keyboard.press('Delete');
    await page.type('input.e-numerictextbox', String(AMOUNT));
    await page.waitForTimeout(500);

    // 6) –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å¬ª
    await page.$$eval('button.btn-red', els =>
      els.find(e => e.textContent?.includes('–ü–æ–ø–æ–ª–Ω–∏—Ç—å'))?.click()
    );
    await page.waitForTimeout(1000);

    status = 'SUCCESS';
  } catch (err) {
    console.error('Processing error:', err.message);
  } finally {
    await browser.close();
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
  const msg =
    status === 'SUCCESS'
      ? `‚úÖ –ü–ª–∞—Ç—ë–∂ ${AMOUNT} ‚ÇΩ (—Ç–µ—Ä–º–∏–Ω–∞–ª ${t.terminal_id})`
      : `üõë FAIL ${AMOUNT} ‚ÇΩ (—Ç–µ—Ä–º–∏–Ω–∞–ª ${t.terminal_id})`;
  await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: CHAT_MAIN, text: msg })
  });

  if (status === 'SUCCESS') {
    await completeTicket(t.id);
  }
}

async function main() {
  try {
    const tickets = await fetchNextTicket();
    if (!tickets.length) return console.log('No new tickets');
    for (const t of tickets) {
      console.log('Processing ticket', t.id);
      await processTicket(t);
    }
  } catch (err) {
    console.error('Runner error:', err.message);
  }
}

// –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ (cron –±—É–¥–µ—Ç –¥–µ—Ä–≥–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
main();
