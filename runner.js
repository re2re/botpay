// runner.js
import 'dotenv/config';
import fetch from 'node-fetch';
import puppeteer from 'puppeteer';

const {
  API_ROOT,
  BOT_TOKEN,
  CHAT_MAIN,
  SITE_URL,
  SITE_LOGIN,
  SITE_PASSWORD,
  TERMINAL_ID
} = process.env;
const sleep = (ms) => new Promise(r => setTimeout(r, ms));
// –ü–∞—Ä—Å–∏–º CLI-–∞—Ä–≥—É–º–µ–Ω—Ç—ã
// node runner.js <PIN> <AMOUNT> [TERMINAL_ID]
const [,, CLI_PIN, CLI_AMOUNT, CLI_TERMINAL] = process.argv;
const isDebug = Boolean(CLI_PIN && CLI_AMOUNT);

if (isDebug) {
  console.log('‚öôÔ∏è  DEBUG MODE: –ø–æ–ª—É—á–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã:', {
    PIN: CLI_PIN,
    AMOUNT: CLI_AMOUNT,
    TERMINAL: CLI_TERMINAL ?? TERMINAL_ID
  });
}

async function fetchNextTicket() {
  if (isDebug) {
    // –≤–æ–∑–≤—Ä–∞—Ç–∏–º –æ–¥–∏–Ω —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
    return [{
      id:       0,
      terminal_id: Number(CLI_TERMINAL ?? TERMINAL_ID ?? 0),
      pin:      String(CLI_PIN).padStart(10, '0'),
      amount:   Number(CLI_AMOUNT)
    }];
  }

  // –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî pull –∏–∑ API
  const res = await fetch(`${API_ROOT}/tickets/new`);
  if (!res.ok) throw new Error(`GET /tickets/new ‚Üí ${res.status}`);
  return await res.json();
}

async function completeTicket(id) {
  if (isDebug) return; // –Ω–µ –ø–æ—Å—ã–ª–∞–µ–º delete –≤ debug-—Ä–µ–∂–∏–º–µ
  const res = await fetch(`${API_ROOT}/tickets/${id}/complete`, {
    method: 'POST'
  });
  if (!res.ok) {
    console.error(`‚ùå completeTicket(${id}) ‚Üí`, await res.text());
  }
}

async function processTicket(t) {
  const PIN    = String(t.pin).padStart(10, '0');
  const AMOUNT = t.amount;
  let status   = 'FAIL';

  console.log(`‚ñ∂ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–∫–µ—Ç–∞ ${t.id} (—Ç–µ—Ä–º–∏–Ω–∞–ª ${t.terminal_id}): PIN=${PIN}, AMOUNT=${AMOUNT}`);

  const browser = await puppeteer.launch({
    headless: false,               // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —É–≤–∏–¥–∏—Ç–µ –æ–∫–Ω–æ
    slowMo:   50,
    args: ['--no-sandbox','--disable-setuid-sandbox']
  });

  try {
    const page = await browser.newPage();
    page.setDefaultTimeout(20000);

    console.log('1) –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
    await page.goto(SITE_URL, { waitUntil: 'networkidle0', timeout: 60000 });
    await page.type('input[placeholder="–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ª–æ–≥–∏–Ω"]',  SITE_LOGIN,   { delay: 100 });
    await page.type('input[placeholder="–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø–∞—Ä–æ–ª—å"]', SITE_PASSWORD, { delay: 100 });
    await page.click('button.btn.btn-red');
    await sleep(500);

    console.log('2) –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ');
    const svgCard = await page.waitForSelector('svg[data-icon="credit-card"]');
    await (await svgCard.evaluateHandle(el => el.closest('button'))).click();
    await sleep(500);

    console.log('3) –í–≤–æ–¥ —Å—É–º–º—ã');
    const field1 = await page.waitForSelector('input.e-numerictextbox');
    await field1.click({ clickCount: 3 });
    await page.keyboard.press('Delete');
    await page.type('input.e-numerictextbox', String(AMOUNT), { delay: 50 });
    await sleep(500);

    console.log('4) –í—ã–±–æ—Ä –≤–∫–ª–∞–¥–∫–∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ');
    await page.$$eval('div.e-tab-text', els => {
      const el = els.find(e => e.textContent?.trim() === '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ');
      el?.click();
    });
    await page.waitForTimeout(500);

    console.log('5) –í–≤–æ–¥ PIN');
    await page.waitForSelector('input[aria-label="textbox"]');
    await page.type('input[aria-label="textbox"]', PIN, { delay: 50 });
    await sleep(500);

    console.log('6) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—è —Å—É–º–º—ã');
    const field2 = await page.waitForSelector('input.e-numerictextbox');
    if (await field2.evaluate(el => el.disabled)) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π PIN: ${PIN}`);
    }

    console.log('7) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—É–º–º—ã');
    await field2.click({ clickCount: 3 });
    await page.keyboard.press('Delete');
    await page.type('input.e-numerictextbox', String(AMOUNT), { delay: 50 });
    await sleep(500);

    console.log('8) –ö–ª–∏–∫ –ü–æ–ø–æ–ª–Ω–∏—Ç—å');
    await page.$$eval('button.btn-red', els => {
      const el = els.find(e => e.textContent?.includes('–ü–æ–ø–æ–ª–Ω–∏—Ç—å'));
      el?.click();
    });
    await sleep(1000);

    console.log('9) –ñ–¥—ë–º –ø–æ–ø–∞–ø –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ');
    const popup = await page.waitForSelector('p.text-justify', { timeout: 25000 });
    const txt   = await popup.evaluate(el => el.textContent ?? '');
    console.log('‚ñ∂ popup text:', txt);
    if (!txt.includes(String(AMOUNT)) || !txt.includes(PIN)) {
      console.warn(`‚ö†Ô∏è Popup –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª (PIN/AMOUNT): "${txt}"`);
    }

    console.log('10) –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø');
    await page.$$eval('button.btn-red', els => {
      const el = els.find(e => e.textContent?.includes('–ó–∞–∫—Ä—ã—Ç—å'));
      el?.click();
    });
    await sleep(500);

    console.log('11) –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    const svgOut = await page.waitForSelector('svg[data-icon="right-from-bracket"]');
    await (await svgOut.evaluateHandle(el => el.closest('button'))).click();

    status = 'SUCCESS';
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
  } catch (err) {
    console.error('üî• –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ:', err.message);
  } finally {
    await browser.close();
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const text = status === 'SUCCESS'
    ? `‚úÖ –ü–ª–∞—Ç—ë–∂ ${AMOUNT} ‚ÇΩ (—Ç–µ—Ä–º–∏–Ω–∞–ª ${t.terminal_id})`
    : `üõë FAIL ${AMOUNT} ‚ÇΩ (—Ç–µ—Ä–º–∏–Ω–∞–ª ${t.terminal_id})`;

  console.log('‚ñ∂ Telegram:', text);
  await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
    method:  'POST',
    headers: { 'Content-Type': 'application/json' },
    body:    JSON.stringify({ chat_id: CHAT_MAIN, text })
  });

  if (status === 'SUCCESS') {
    await completeTicket(t.id);
  }
}

async function main() {
  try {
    const tickets = await fetchNextTicket();
    if (!tickets.length) {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤');
      return;
    }
    for (const t of tickets) {
      await processTicket(t);
    }
  } catch (err) {
    console.error('Runner error:', err.message);
  }
}

await main();
