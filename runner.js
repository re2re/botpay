import 'dotenv/config';
import puppeteer from 'puppeteer';

// –ï—Å–ª–∏ Node <18, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É:
// import fetch from 'node-fetch';

const {
  API_ROOT,
  BOT_TOKEN,
  CHAT_MAIN,
  SITE_URL,
  SITE_LOGIN,
  SITE_PASSWORD
} = process.env;

// –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–∞—É–∑—ã –≤ async-—Ñ—É–Ω–∫—Ü–∏—è—Ö
const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

async function fetchNextTicket() {
  const res = await fetch(`${API_ROOT}/tickets/new`);
  if (!res.ok) throw new Error(`GET /tickets/new ‚Üí ${res.status}`);
  const data = await res.json();
  if (!Array.isArray(data)) throw new Error(`Invalid tickets response: ${JSON.stringify(data)}`);
  return data;
}

async function completeTicket(id) {
  const res = await fetch(`${API_ROOT}/tickets/${id}/complete`, { method: 'POST' });
  if (!res.ok) {
    console.error(`Failed to complete ticket ${id}: ${await res.text()}`);
  }
}

async function rawProcessTicket(t) {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
  const PIN = String(t.pin).padStart(10, '0');
  const AMOUNT = t.amount;

  const browser = await puppeteer.launch({
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  try {
    const page = await browser.newPage();
    page.setDefaultTimeout(20000);

    console.log('1) –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É');
    await page.goto(SITE_URL, { waitUntil: 'networkidle0', timeout: 60000 });
    await page.type('input[placeholder="–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ª–æ–≥–∏–Ω"]', SITE_LOGIN, { delay: 100 });
    await page.type('input[placeholder="–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø–∞—Ä–æ–ª—å"]', SITE_PASSWORD, { delay: 100 });
    await page.click('button.btn.btn-red');
    await sleep(500);

    console.log('2) –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ');
    const svgCard = await page.waitForSelector('svg[data-icon="credit-card"]');
    await (await svgCard.evaluateHandle(el => el.closest('button'))).click();
    await sleep(500);

    console.log('3) –í–≤–æ–¥ —Å—É–º–º—ã');
    const field1 = await page.waitForSelector('input.e-numerictextbox');
    await field1.click({ clickCount: 3 });
    await page.keyboard.press('Delete');
    await page.type('input.e-numerictextbox', String(AMOUNT), { delay: 50 });
    await sleep(500);

    console.log('4) –í—ã–±–æ—Ä –≤–∫–ª–∞–¥–∫–∏ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ');
    await page.$$eval('div.e-tab-text', els => {
      const el = els.find(e => e.textContent?.trim() === '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ');
      el?.click();
    });
    await sleep(500);

    console.log('5) –í–≤–æ–¥ PIN');
    await page.waitForSelector('input[aria-label="textbox"]');
    await page.type('input[aria-label="textbox"]', PIN, { delay: 50 });
    await sleep(500);

    console.log('6) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—è —Å—É–º–º—ã');
    const field2 = await page.waitForSelector('input.e-numerictextbox');
    if (await field2.evaluate(el => el.disabled)) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π PIN: ${PIN}`);
    }

    console.log('7) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—É–º–º—ã');
    await field2.click({ clickCount: 3 });
    await page.keyboard.press('Delete');
    await page.type('input.e-numerictextbox', String(AMOUNT), { delay: 50 });
    await sleep(500);

    console.log('8) –ö–ª–∏–∫ –ü–æ–ø–æ–ª–Ω–∏—Ç—å');
    await page.$$eval('button.btn-red', els => {
      const el = els.find(e => e.textContent?.includes('–ü–æ–ø–æ–ª–Ω–∏—Ç—å'));
      el?.click();
    });
    await sleep(1000);

    console.log('9) –ñ–¥—ë–º –ø–æ–ø–∞–ø –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ');
    const popup = await page.waitForSelector('p.text-justify', { timeout: 25000 });
    const txt = await popup.evaluate(el => el.textContent ?? '');
    console.log('‚ñ∂ popup text:', txt);
    if (!txt.includes(String(AMOUNT)) || !txt.includes(PIN)) {
      console.warn(`‚ö†Ô∏è Popup –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª (PIN/AMOUNT): "${txt}"`);
    }

    console.log('10) –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–ø–∞–ø');
    await page.$$eval('button.btn-red', els => {
      const el = els.find(e => e.textContent?.includes('–ó–∞–∫—Ä—ã—Ç—å'));
      el?.click();
    });
    await sleep(500);

    console.log('11) –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    const svgOut = await page.waitForSelector('svg[data-icon="right-from-bracket"]');
    await (await svgOut.evaluateHandle(el => el.closest('button'))).click();

    console.log('‚úÖ ticket ' + t.id + ' processed');
    return true;
  } finally {
    await browser.close();
  }
}

async function handleTicket(t) {
  let success = false;
  let lastError = null;

  for (let attempt = 1; attempt <= 3; attempt++) {
    try {
      console.log(`Processing ticket ${t.id}, attempt ${attempt}`);
      await rawProcessTicket(t);
      success = true;
      break;
    } catch (err) {
      console.error(`Attempt ${attempt} failed for ticket ${t.id}:`, err.message);
      lastError = err;
      if (attempt < 3) await sleep(1000 * attempt);
    }
  }

  const AMOUNT = t.amount;
  const msg = success
    ? `‚úÖ –ü–ª–∞—Ç—ë–∂ ${AMOUNT} ‚ÇΩ (—Ç–µ—Ä–º–∏–Ω–∞–ª ${t.terminal_id})`
    : `üõë FAIL ${AMOUNT} ‚ÇΩ (—Ç–µ—Ä–º–∏–Ω–∞–ª ${t.terminal_id}) –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: ${lastError?.message}`;

  // Telegram
  await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ chat_id: CHAT_MAIN, text: msg })
  });

  if (success) {
    await completeTicket(t.id);
  }
}

async function main() {
  try {
    const tickets = await fetchNextTicket();
    if (!tickets.length) {
      console.log('No new tickets');
      return;
    }
    for (const t of tickets) {
      await handleTicket(t);
    }
  } catch (err) {
    console.error('Runner error:', err.message);
  }
}

// –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏ –ø–æ–≤—Ç–æ—Ä –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
main().catch(err => console.error('Fatal error:', err));
setInterval(main, 5000);

// –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑ (cron –±—É–¥–µ—Ç –¥–µ—Ä–≥–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
main();
